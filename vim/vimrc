" This is for both Vim and Neovim. For Neovim, it has some conditionals to make
" sure that only when Neovim is running those lines will be loaded. You will see
" `if has("nvim")` and `if !has("nvim")` in the code.
"
" Installation: copy or symlink this file to ~/.vimrc

" SETUP
"
" plug.vim: install it in case it doesn't exist.
if has("nvim") " neovim?
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

" Plug plugins: it loads the plugins listed in ~/.vim.plugins
call plug#begin('~/.vim/plugins')
source ~/.vim.plugins
call plug#end()


" avoiding annoying CSApprox warning message
let g:CSApprox_verbose_level = 0
let g:table_mode_disable_mappings = 1
let g:table_mode_disable_tableize_mappings = 1
let g:table_mode_map_prefix = "<Leader>xxxxxxxxxxxxxxxxxx"

" Change cursor shape between insert and normal mode in iTerm2.app
if $TERM_PROGRAM =~ "iTerm.app"
  " Vertical bar in insert mode
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
  " Block in normal mode
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
endif

set nocompatible               " be iMproved
filetype off                   " required!

" Configuration
set tags=tags                     " ctags

" This makes Vim slow with Ruby and the new Vim regex engine after v7+
syntax on                         " Turn on syntax highlighting.

" This relies on the old regex
set re=0

" syntax on is pretty slow after updating VIM to v8-1600. The following
" 2 lines make it fast
"
" https://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
set ttyfast
set lazyredraw

set synmaxcol=500
filetype plugin on
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

" highlight ColorColumn guibg=darkgray ctermbg=darkgray
set colorcolumn=80
"let &colorcolumn=join(range(81,999),",")
"let &colorcolumn="80,".join(range(120,999),",")
set pastetoggle=<F2>
set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

" For using gf with files which 'include' doesn't include `js` at the end,
" e.g in Javascript projects, a `require('path')` won't attemp to load `path.js`
" unless this option is set.
set suffixesadd+=.js
set suffixesadd+=.rb

" Slow?
" set cursorline

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=full                 " Complete files like a shell.

" MUCOMPLETE Plugin
"
" Configuration for MUcomplete
  set completeopt+=menu,menuone,noinsert
  set shortmess+=c   " Shut off completion messages
  set belloff+=ctrlg " If Vim beeps during completion
  set omnifunc=syntaxcomplete#Complete

  let g:mucomplete#enable_auto_at_startup = 1
  let g:mucomplete#completion_delay = 250
  let g:mucomplete#reopen_immediately = 0
  let g:mucomplete#minimum_prefix_length = 2

  " MUComplete + SnipMate
  "
  " There's a series of configurations for snipMate to work properly with
  " MUComplete.
  if !exists("g:snipMate")
    let g:snipMate = {}
  endif
  let g:snipMate['no_match_completion_feedkeys_chars'] = ''
  let g:snipMate['always_choose_first'] = 1
  " Give priority to the snippets in $VIM/after/snippets/ over vim-snippets
  let g:snipMate['override'] = 1
  let g:snipMate['snippet_version'] = 1

  " " Add snipmate to MUcomplete chain
  let g:mucomplete#wordlist = {
        \   'default': ['January', 'July', 'June'],
        \   'typescript': ['console.log()', 'console.trace()']
        \ }

  " Using `tags` in the chain isn't working. It's adding a " to almost all
  " keywords, making development impossible.
  let g:mucomplete#chains = {
        \   'vim': ['path', 'cmd', 'keyn'],
        \   'gitcommit': ['path'],
        \   'default': {
        \     'default': ['omni', 'snip', 'keyp', 'keyn', 'list'],
        \     '.*string.*': [],
        \     '.*comment.*': [],
        \   }
        \ }

  " Expand snippets or complete text using only <tab>
  "
  " In case snipMate is doing its thing, don't use MUComplete. For instance, we
  " want MUComplete to not activate when snipMate is jumping tab stops.
  fun! MyTabAction()
    "if snipMate#CanBeTriggered() >= 1 || exists("b:snip_state")
    "  return "\<plug>snipMateNextOrTrigger"
    "else
      return "\<plug>(MyFwd)"
    "endif
  endf

  " To avoid redefining the same triggers over and over.
  if !exists("g:mycr_defined")
    " Expand automatically when you accept a menu entry with Enter
    inoremap <plug>MyEnter <cr>
    imap <silent> <expr> <plug>MyCR (pumvisible()
        \ ? "\<c-y>\<plug>snipMateTrigger"
        \ : "\<plug>MyEnter")
    imap <cr> <plug>MyCR

    imap <plug>(MyFwd) <plug>(MUcompleteFwd)
    imap <expr> <silent> <tab> MyTabAction()
    let g:mycr_defined = 1
  endif

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
au BufNewFile,BufRead,BufReadPost *.md set linebreak
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=/var/tmp            " Keep swap files in one location

set signcolumn=yes
" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
setlocal autoindent
setlocal cindent
setlocal smartindent
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
" Slow?
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c%V\ %)%P

set formatoptions+=j
" Slow?
set foldmethod=indent
set fillchars=fold:\
set foldlevelstart=99
set foldlevel=99

" Filetypes
au BufRead,BufNewFile *.scss  set filetype=scss
au BufRead,BufNewFile *.ejs   set filetype=html
au BufNewFile,BufRead *.slim  setlocal filetype=slim
au Filetype javascript.jsx    setlocal filetype=jsx
au BufNewFile,BufRead *.tsx   set filetype=typescript
au BufNewFile,BufRead *.ts    set filetype=typescript
autocmd FileType gitcommit    set nosmartindent

au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG 	setf gitcommit
au BufNewFile,BufRead *.git/config,.gitconfig,/etc/gitconfig,gitconfig 	setf gitconfig
au BufNewFile,BufRead */.config/git/config			setf gitconfig
au BufNewFile,BufRead .gitmodules,*.git/modules/*/config	setf gitconfig

hi CursorLineNR cterm=bold
augroup CLNRSet
  autocmd! ColorScheme * hi CursorLineNR cterm=bold ctermfg=green
augroup END


" Comments: linebreak automatically in commenting lines in code.
augroup comment_textwidth
  autocmd!
  autocmd TextChanged,TextChangedI * :call AdjustTextWidth()
augroup END

" Comments: returns the line width depending on whether it's a comment or not
function! AdjustTextWidth()
  let syn_element = synIDattr(synID(line("."), col(".") - 1, 1), "name")
  let &textwidth = syn_element =~? 'comment' ? 80 : 80
  return "tw = " . &textwidth
endfunction


" LARGE FILES
"
" file is large from 2mb
let g:LargeFile = 1024 * 1024 * 2
augroup LargeFile
  autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function! LargeFile()
  " no syntax highlighting etc
  set eventignore+=FileType
  " save memory when other file is viewed
  setlocal bufhidden=unload
  " is read-only (write with :w new_filename)
  setlocal buftype=nowrite
  " no undo possible
  setlocal undolevels=-1
  " display message
  autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed (see .vimrc for details)."
endfunction

" "Theme
colorscheme alex_ir_black

"railscasts


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DEFAULT BEHAVIORS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif
endif

" Make the quickfix window the shortest possible given the content.
" Without this, the window might have 10 lines, even though the content only has
" 1 line. This is useful when working with e.g Typescript, as it's always
" opening the qf window as you save files.
au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
   let l = 1
   let n_lines = 0
   let w_width = winwidth(0)
   while l <= line('$')
       " number to float for division
       let l_len = strlen(getline(l)) + 0.0
       let line_width = l_len/w_width
       let n_lines += float2nr(ceil(line_width))
       let l += 1
   endw
   exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" elzr/vim-json
"
" Why would anyone want to conceal characters in code?
let g:vim_json_syntax_conceal = 0

" ACK + AG
" For cases where :Ag is used, the ignore paths are in Ag's global ignore file,
" For example, https://github.com/kurko/dotfiles/blob/2054ca0924ebc2c926e81d6d981b18cfaaaffec8/ag/ignore
if executable('ag')
  let g:ackprg = 'ag --vimgrep --ignore-dir /*node_modules --ignore-dir /*public/packs-test/ --ignore-dir /*sorbet'
endif

" ALE plugin
let g:ale_enabled = 1
let g:ale_sign_error = 'E'
let g:ale_sign_warning = 'W'
let g:ale_sign_column_always = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 'never' " always  never
let g:ale_lint_on_insert_leave = 1 " default 0
let g:ale_echo_msg_format = '%linter% says %code%: %s'
let g:ale_lint_delay = 1000 " defaults to 200
let g:ale_echo_delay = 10 " defaults 10
let g:ale_completion_delay = 400 "defaults 100
let g:ale_set_highlights = 1
let g:ale_fix_on_save = 0

nmap <F8> <Plug>(ale_fix)

highlight ALEErrorSign ctermfg=red
highlight ALEWarningSign ctermfg=red

" Ale - Only use linters that make sense
function! SetAleBufferLinters()
  let ruby_linters = ["ruby"]

  if filereadable(".rubocop.yml") | :call add(ruby_linters, "rubocop") | endif
  if filereadable("sorbet/config") | :call add(ruby_linters, "sorbet") | endif
  if filereadable(".reek.yml")
    :call add(ruby_linters, "reek")
  endif
  if filereadable(".standard.yml")
    :call add(ruby_linters, "standardrb")
  endif
  if filereadable("rails_best_practices.yml") | :call add(ruby_linters, "rails_best_pratices") | endif

  let b:ale_linters = {
  \   'ruby': ruby_linters,
  \}
endfunction

" Ale - Only use fixers that make sense
function! SetAleBufferFixers()
  let ruby_fixers = []

  if filereadable(".rubocop.yml") | :call add(ruby_fixers, "rubocop") | endif
  if filereadable(".standard.yml")
    :call add(ruby_fixers, "standardrb")
  endif

  let b:ale_fixers = {
  \   'ruby': ruby_fixers,
  \}
endfunction

augroup AleGroup
  autocmd!
  autocmd FileType,BufEnter * call SetAleBufferFixers()
  autocmd FileType,BufEnter * call SetAleBufferLinters()
augroup END

" vim-surround
"
autocmd FileType ruby let b:surround_111 = "\1block: \1 do\r end"
" When entering commit screen, automatically go into insert mode
" autocmd FileType gitcommit exec 'au VimEnter * startinsert'

" git
  highlight diffAdded   ctermfg=green
  highlight diffRemoved ctermfg=red

" git gutter
  set updatetime=100
  let g:signify_realtime = 0

  " highlight lines in signify and vimdiff etc.)
  highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
  highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
  highlight DiffChange        cterm=bold ctermbg=none ctermfg=227

  " highlight lines in signify and vimdiff etc.)
  highlight SignifySignAdd    cterm=bold ctermbg=none  ctermfg=119
  highlight SignifySignDelete cterm=bold ctermbg=none  ctermfg=167
  highlight SignifySignChange cterm=bold ctermbg=none  ctermfg=227

  " The sign column (often mistakenly called "gutter") itself (all lines without
  " signs) is highlighted by |hl-SignColumn|. Some colorschemes define no
  " background color for |hl-Normal| but for |hl-SignColumn|. To avoid that
  " visible difference:
  highlight SignColumn ctermbg=NONE cterm=NONE guibg=NONE gui=NONE

" zencoding plugin
 let g:user_zen_settings = {
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'c',
  \  },
  \  'xml' : {
  \    'extends' : 'html',
  \  },
  \  'erb' : {
  \    'extends' : 'html',
  \  },
  \  'haml' : {
  \    'extends' : 'html',
  \  },
  \}

" Paste.vim
let g:paste_no_mappings = 1
" nnoremap <shortcut> :Paste<CR>

" vim-rooter
let g:rooter_patterns = ['package.json', 'Gemfile', 'Rakefile', '.git/']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM SHORTCUTS & KEY BINDINGS
"
" For tests & specs custom functions and key bindings, look at the respective
" section below
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  set timeoutlen=200
  let mapleader = ","

  " save by pressing ,s instead of :w
  map <Leader>be :BufExplorer<CR>

  " Prevents Vim from scrolling when splitting the window horizontally.
    nnoremap <C-W>s Hmx`` \|:split<CR>`xzt``
    nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>

  " ]p to paste and indent code automatically
    nnoremap ]p p=`]

  " Motion for "next object". For example, "din(" would go to the next "()" pair
  " and delete its contents.
    onoremap an :<c-u>call <SID>NextTextObject('a')<cr>
    xnoremap an :<c-u>call <SID>NextTextObject('a')<cr>
    onoremap in :<c-u>call <SID>NextTextObject('i')<cr>
    xnoremap in :<c-u>call <SID>NextTextObject('i')<cr>

    function! s:NextTextObject(motion)
      echo
      let c = nr2char(getchar())
      exe "normal! f".c."v".a:motion.c
    endfunction

  " Folding
    nnoremap <leader>1 :set foldlevel=1<cr>
    nnoremap <leader>2 :set foldlevel=2<cr>
    nnoremap <leader>3 :set foldlevel=3<cr>
    nnoremap <leader>4 :set foldlevel=4<cr>
    nnoremap <leader>5 :set foldlevel=5<cr>
    nnoremap <leader>6 :set foldlevel=6<cr>
    nnoremap <leader>7 :set foldlevel=7<cr>
    nnoremap <leader>8 :set foldlevel=8<cr>
    nnoremap <leader>9 :set foldlevel=9<cr>
    nnoremap <leader>0 :set foldlevel=99<cr>

  " Tab mappings.
    map <leader>tt :tabnew<cr>
    map <leader>ts :tab split<cr>
    map <leader>te :tabedit
    map <leader>tc :tabclose<cr>
    map <leader>to :tabonly<cr>
    map <leader>tn :tabnext<cr>
    map <leader>tp :tabprevious<cr>
    map <leader>tf :tabfirst<cr>
    map <leader>tl :tablast<cr>
    map <leader>tm :tabmove

  " Enter clears search highlight (replaced with running tests)
  " nmap <CR> :nohlsearch<CR>

  " When pasting in visual mode, doesn't replace current register
  " vnoremap p "_dP
  " I haven't found how to hide this function (yet)
  function! RestoreRegister()
    let @" = s:restore_reg
    return ''
  endfunction

  function! s:Repl()
      let s:restore_reg = @"
      return "p@=RestoreRegister()\<cr>"
  endfunction

  " this supports "rp that replaces the selection by the contents of @r
  " I was using vnoremap but that was getting in select as well and
  " conflicting with Snipmate.
  xnoremap <silent> <expr> p <sid>Repl()

  " Goes to the end of the line (pressing shift+4 is annoying)
  nmap 44 $
  vmap 44 $h

  " Ruby
  "
  " This will write:
  "
  "   ap 'AdWords::Response#entity'
  function! ApFn()
    execute "normal! ccputs \"" . expand("%") . "#" . cfi#get_func_name() . "\""
  endfunction

  autocmd FileType ruby command! Apfn call ApFn()

  " Updates CTags
  map <F5> :exec "!ctags -R --exclude=.git --exclude=node_modules --exclude=./vendor/bundle --exclude=public/packs* --exclude=coverage *"<CR>

  nmap <leader>cat :!cat %<CR>
  nmap <leader>vim :e ~/.vimrc<CR>

  " Buffer
  "
  " :Ls will mimic :ls, but order by filenames, not number
  command! -bang Ls redir @" | silent ls<bang> | redir END | echo " " |
   \ perl {
   \ my $msg=VIM::Eval('@"');
   \ my %list=();
   \ my $key, $value;
   \ while($msg =~ m/(.*?line\s+\d+)/g)
   \ {
   \ $value = $1;
   \ $value =~ m/"([^"]+)"/;
   \ $key = $1;
   \ ($^O =~ /mswin/i) and $key = lc($key);
   \ $list{$key} = $value;
   \ }
   \ my $msg = '';
   \ for $key (sort keys %list)
   \ {
   \ $msg .= "$list{$key}\n";
   \ }
   \ VIM::Msg($msg);
   \ }
   \ <CR>

  " opens buffer list and writes ':b ', so you just have to type a number
  if has('perl')
    nnoremap <leader>l :Buffers<CR>
  else
    nnoremap <leader>l :Buffers<CR>
  endif

  " Spacebar saves
  "
  " If current file is .vimrc, it will then reload it to refresh the changes
  " Disable <Space> in normal mode
  nnoremap <Space> <NOP>
  "nnoremap <Space> :exec ":write"<cr>
  "nnoremap <Space> if match(expand('%'), "\.vimrc") >= 1 || match(expand('%'), 'vim$') \| exec ":so %" \| endif<cr>
  nnoremap <expr> <Space> (match(expand('%'), 'vim') >= 1 ? ":write \| source %<cr>" : ":write<cr>")

  " Resizing windows
  nnoremap <C-h> :vertical resize +5<cr>
  nnoremap <C-l> :vertical resize -5<cr>
  nnoremap <C-k> :resize +5<cr>
  nnoremap <C-j> :resize -5<cr>

  " When you've writen : (colon), press %% very fast and it'll write the current
  " file's directory
  cnoremap %% <C-R>=expand('%:h').'/'<cr>
  map <leader>e :edit %%
  map <leader>v :view %%

  " MARKDOWN
  let g:table_mode_corner='|'
  let g:table_mode_disable_mappings = 0
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
  autocmd BufRead,BufNewFile *.md exec ":silent TableModeEnable"

  " RUBY & RAILS

    " Plugin config: Splitjoin.vim
    let g:splitjoin_trailing_comma = 0
    let g:splitjoin_ruby_hanging_args = 0
    let g:splitjoin_ruby_curly_braces = 0
    let g:splitjoin_ruby_options_as_arguments = 1
    nmap sj :SplitjoinSplit<cr>
    nmap sk :SplitjoinJoin<cr>

    "CANDIDATES FOR PLUGIN
    "
    " duplicate current block
    "
    " Put the cursor on a line that has a block (e.g 'context x do') and
    " type <leader>d.
    function! DuplicateRubyBlock()
      normal $V%y
      normal $%o
      normal p
      " For centralizing the screen, uncomment
      " normal zz10<C-e>
    endfunction
    autocmd FileType ruby nmap <leader>D :call DuplicateRubyBlock()<cr>

    " Surround Ruby block with another block
    function! SurroundRubyBlock()
      normal $V%So
    endfunction
    autocmd FileType ruby nmap <leader>S :call SurroundRubyBlock()<cr>

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " SWITCH BETWEEN TEST AND PRODUCTION CODE
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    function! OpenTestAlternate()
      let new_file = AlternateForCurrentFile()
      exec ':e ' . new_file
    endfunction
    function! AlternateForCurrentFile()
      let current_file = expand("%")
      let new_file = current_file
      let in_spec = match(current_file, '^spec/') != -1
      let going_to_spec = !in_spec
      let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<workers\>') != -1 || match(current_file, '\<jobs\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1  || match(current_file, '\<services\>') != -1
      if going_to_spec
        if in_app
          let new_file = substitute(new_file, '^app/', '', '')
        end
        let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
        let new_file = 'spec/' . new_file
      else
        let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
        let new_file = substitute(new_file, '^spec/', '', '')
        if in_app
          let new_file = 'app/' . new_file
        end
      endif
      return new_file
    endfunction
    nnoremap <leader>a :call OpenTestAlternate()<cr>

    " Keeps current file in on side, and its test file in the other
    " (depends on Rails.vim)
    map <leader>A :on<CR>\|:vsplit<CR>\|<c-w>l\|:call OpenTestAlternate()<CR>

    " :A is from rails.vim plugin
    " nnoremap <Leader>a :A<CR>


    " deletes the remaining chars from a string
    nnoremap <Leader>ds vf"hd

    " let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
    map <leader>fa :Files! app/assets<cr>
    map <leader>fj :Files! app/javascript<cr>
    map <leader>fv :Files! app/views<cr>
    map <leader>fc :Files! app/controllers<cr>
    map <leader>fm :Files! app/models<cr>
    map <leader>fl :Files! lib<cr>
    map <leader>fs :Files! spec<cr>
    map <leader>f :Files!<cr>
    nmap <leader>b :Buffers!<cr>

  " JAVASCRIPT
    au FileType html,css,erb,javascript.jsx,typescript EmmetInstall

  " TYPESCRIPT
  " This option makes things really slow.
  let g:tsuquyomi_completion_detail = 0
  let g:tsuquyomi_completion_preview = 0
  let g:tsuquyomi_use_local_typescript = 1

  augroup syntax
    au!
    autocmd BufNewFile,BufRead Gemfile,Gemfile.tt,Gemfile.backup    set syntax=ruby
  augroup END

  augroup typescript
    au!
    autocmd BufNewFile,BufRead *.tsx   set re=0
    autocmd BufNewFile,BufRead *.ts    set re=0
    autocmd BufNewFile,BufRead *.tsx   set syntax=typescriptreact
    autocmd BufNewFile,BufRead *.ts    set syntax=javascript

    " Type definitions
    autocmd FileType typescript,typescript.tsx nmap <Space><C-]> <Plug>(TsuquyomiReferences)
    autocmd FileType typescript,typescript.tsx nnoremap <leader>rn :TsuRenameSymbol<cr>
    autocmd FileType typescript,typescript.tsx nnoremap <leader>d :TsuDefinition<cr>
    autocmd FileType typescript,typescript.tsx nnoremap <leader>D :TsuTypeDefinition<cr>
  augroup END

  let g:user_emmet_leader_key='<C-y>'
  let g:user_emmet_settings = {
    \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
    \}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Rename current file
  function! RenameFile()
    let old_name = expand('%')
    let old_directory = $PWD . "/" . fnamemodify(expand(old_name), ':h')
    let new_name = input('Renaming file. New file name: ', expand('%'), 'file')
    let new_directory = fnamemodify(expand(new_name), ':h')
    if new_name != '' && new_name != old_name
      exec ':silent !mkdir -p ' . new_directory
      exec ':saveas ' . new_name
      exec ':silent !rm ' . old_name
      exec ':silent !find ' . old_directory . ' -type d -empty -exec rmdir {} +'
      redraw!
    endif
  endfunction

  " Copy current file to a new location
  function! CopyFile()
    let old_name = expand('%')
    let new_name = input('Copying file. New file name: ', expand('%'), 'file')
    let new_directory = fnamemodify(expand(new_name), ':h')
    if new_name != '' && new_name != old_name
      exec ':silent !mkdir -p ' . new_directory
      exec ':saveas ' . new_name
      redraw!
    endif
  endfunction

  map <leader>n :call RenameFile()<cr>
  map <leader>c :call CopyFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TESTS & SPECS FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  function! SleepForZeusToReload()
    exec ':sleep 50m'
  endfunction

  nnoremap <cr> <ESC>:w<CR>\|:call SleepForZeusToReload()\|:call RunTestFile()<cr>
  nnoremap <Bslash> <ESC>:w<CR>\|:sleep 50m<CR>\|:call RunNearestTest()<cr>
  map <leader>t :call RunTestFile()<cr>
  map <leader>r :call RunNearestTest()<cr>
  map <leader>bt <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb %<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENT CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " taken from http://vim.wikia.com/wiki/Highlight_unwanted_spaces
  highlight RedundantSpaces ctermbg=red guibg=red
  match RedundantSpaces /\s\+$/
  autocmd BufWinEnter * match RedundantSpaces /\s\+$/
  " Slow?
  " autocmd InsertEnter * match RedundantSpaces /\s\+\%#\@<!$/
  " autocmd InsertLeave * match RedundantSpaces /\s\+$/
  autocmd BufWinLeave * call clearmatches()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" INDENTING WHEN PASTING
" Paste and indent if we're at the beginning of a line. Else, just paste.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PasteAndIndent()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    "execute ":normal! p=`]"
    execute ":echo 1111"
    execute ":normal! p"
  else
    execute ":echo 2222"
    execute ":normal! p"
  endif
endfunction

" PLUGINS
"
" Nerdtree
let NERDTreeShowHidden=1
map <C-n> :NERDTreeToggle %<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" AI.Vim
let g:ai_no_mappings=1
let g:ai_completions_model="gpt-3.5-turbo"
let g:ai_edits_model="gpt-4"
let g:ai_timeout=20
vnoremap <silent> <leader>aif :AI fix grammar and spelling and replace slang and contractions with a formal academic writing style<CR>

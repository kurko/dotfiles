" This is specifically for VSCode.
"
set colorcolumn=80
"let &colorcolumn=join(range(81,999),",")
"let &colorcolumn="80,".join(range(120,999),",")
set pastetoggle=<F2>
set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

" For using gf with files which 'include' doesn't include `js` at the end,
" e.g in Javascript projects, a `require('path')` won't attemp to load `path.js`
" unless this option is set.
set suffixesadd+=.js
set suffixesadd+=.rb

set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.
set wildmode=full                 " Complete files like a shell.
set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
au BufNewFile,BufRead,BufReadPost *.md set linebreak
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=/var/tmp            " Keep swap files in one location

set signcolumn=yes
" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
setlocal autoindent
setlocal cindent
setlocal smartindent
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Slow?
set foldmethod=indent
set fillchars=fold:\
set foldlevelstart=99
set foldlevel=99


" Keyboard
  set timeoutlen=200
  let mapleader = ","

  " Prevents Vim from scrolling when splitting the window horizontally.
    nnoremap <C-W>s Hmx`` \|:split<CR>`xzt``

  " Folding
    nnoremap <leader>1 :set foldlevel=1<cr>
    nnoremap <leader>2 :set foldlevel=2<cr>
    nnoremap <leader>3 :set foldlevel=3<cr>
    nnoremap <leader>4 :set foldlevel=4<cr>
    nnoremap <leader>5 :set foldlevel=5<cr>
    nnoremap <leader>6 :set foldlevel=6<cr>
    nnoremap <leader>7 :set foldlevel=7<cr>
    nnoremap <leader>8 :set foldlevel=8<cr>
    nnoremap <leader>9 :set foldlevel=9<cr>
    nnoremap <leader>0 :set foldlevel=99<cr>

  " Tab mappings.
    map <leader>tt :tabnew<cr>
    map <leader>ts :tab split<cr>
    map <leader>te :tabedit
    map <leader>tc :tabclose<cr>
    map <leader>to :tabonly<cr>
    map <leader>tn :tabnext<cr>
    map <leader>tp :tabprevious<cr>
    map <leader>tf :tabfirst<cr>
    map <leader>tl :tablast<cr>
    map <leader>tm :tabmove

  " Enter clears search highlight (replaced with running tests)
  " nmap <CR> :nohlsearch<CR>

  " When pasting in visual mode, doesn't replace current register
  " vnoremap p "_dP
  " I haven't found how to hide this function (yet)
  function! RestoreRegister()
    let @" = s:restore_reg
    return ''
  endfunction

  function! s:Repl()
      let s:restore_reg = @"
      return "p@=RestoreRegister()\<cr>"
  endfunction

  " this supports "rp that replaces the selection by the contents of @r
  " I was using vnoremap but that was getting in select as well and
  " conflicting with Snipmate.
  xnoremap <silent> <expr> p <sid>Repl()

  " Goes to the end of the line (pressing shift+4 is annoying)
  nmap 44 $
  vmap 44 $h

  " Ruby
  "
  " This will write:
  "
  "   ap 'AdWords::Response#entity'
  function! ApFn()
    execute "normal! ccputs \"" . expand("%") . "#" . cfi#get_func_name() . "\""
  endfunction

  autocmd FileType ruby command! Apfn call ApFn()

  " Updates CTags
  map <F5> :exec "!ctags -R --exclude=.git --exclude=node_modules --exclude=./vendor/bundle --exclude=public/packs* --exclude=coverage *"<CR>

  nmap <leader>cat :!cat %<CR>
  nmap <leader>vim :e ~/.vimrc<CR>

  " Buffer
  "
  " :Ls will mimic :ls, but order by filenames, not number
  command! -bang Ls redir @" | silent ls<bang> | redir END | echo " " |
   \ perl {
   \ my $msg=VIM::Eval('@"');
   \ my %list=();
   \ my $key, $value;
   \ while($msg =~ m/(.*?line\s+\d+)/g)
   \ {
   \ $value = $1;
   \ $value =~ m/"([^"]+)"/;
   \ $key = $1;
   \ ($^O =~ /mswin/i) and $key = lc($key);
   \ $list{$key} = $value;
   \ }
   \ my $msg = '';
   \ for $key (sort keys %list)
   \ {
   \ $msg .= "$list{$key}\n";
   \ }
   \ VIM::Msg($msg);
   \ }
   \ <CR>

  " Spacebar saves
  "
  " If current file is .vimrc, it will then reload it to refresh the changes
  " Disable <Space> in normal mode
  nnoremap <Space> <NOP>
  "nnoremap <Space> :exec ":write"<cr>
  "nnoremap <Space> if match(expand('%'), "\.vimrc") >= 1 || match(expand('%'), 'vim$') \| exec ":so %" \| endif<cr>
  nnoremap <expr> <Space> (match(expand('%'), 'vim') >= 1 ? ":write \| source %<cr>" : ":write<cr>")

  " Resizing windows
  nnoremap <C-h> :vertical resize +5<cr>
  nnoremap <C-l> :vertical resize -5<cr>
  nnoremap <C-k> :resize +5<cr>
  nnoremap <C-j> :resize -5<cr>

  " When you've writen : (colon), press %% very fast and it'll write the current
  " file's directory
  cnoremap %% <C-R>=expand('%:h').'/'<cr>
  map <leader>e :edit %%
  map <leader>v :view %%

  " MARKDOWN
  let g:table_mode_corner='|'
  let g:table_mode_disable_mappings = 0
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80
  autocmd BufRead,BufNewFile *.md exec ":silent TableModeEnable"

  " RUBY & RAILS

    " Plugin config: Splitjoin.vim
    let g:splitjoin_trailing_comma = 0
    let g:splitjoin_ruby_hanging_args = 0
    let g:splitjoin_ruby_curly_braces = 0
    let g:splitjoin_ruby_options_as_arguments = 1
    nmap sj :SplitjoinSplit<cr>
    nmap sk :SplitjoinJoin<cr>

    "CANDIDATES FOR PLUGIN
    "
    " duplicate current block
    "
    " Put the cursor on a line that has a block (e.g 'context x do') and
    " type <leader>d.
    function! DuplicateRubyBlock()
      normal $V%y
      normal $%o
      normal p
      " For centralizing the screen, uncomment
      " normal zz10<C-e>
    endfunction
    autocmd FileType ruby nmap <leader>D :call DuplicateRubyBlock()<cr>

    " Surround Ruby block with another block
    function! SurroundRubyBlock()
      normal $V%So
    endfunction
    autocmd FileType ruby nmap <leader>S :call SurroundRubyBlock()<cr>

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " SWITCH BETWEEN TEST AND PRODUCTION CODE
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    function! OpenTestAlternate()
      let new_file = AlternateForCurrentFile()
      exec ':e ' . new_file
    endfunction
    function! AlternateForCurrentFile()
      let current_file = expand("%")
      let new_file = current_file
      let in_spec = match(current_file, '^spec/') != -1
      let going_to_spec = !in_spec
      let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<workers\>') != -1 || match(current_file, '\<jobs\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1  || match(current_file, '\<services\>') != -1
      if going_to_spec
        if in_app
          let new_file = substitute(new_file, '^app/', '', '')
        end
        let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
        let new_file = 'spec/' . new_file
      else
        let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
        let new_file = substitute(new_file, '^spec/', '', '')
        if in_app
          let new_file = 'app/' . new_file
        end
      endif
      return new_file
    endfunction
    nnoremap <leader>a :call OpenTestAlternate()<cr>

    " Keeps current file in on side, and its test file in the other
    " (depends on Rails.vim)
    map <leader>A :on<CR>\|:vsplit<CR>\|<c-w>l\|:call OpenTestAlternate()<CR>

    " :A is from rails.vim plugin
    " nnoremap <Leader>a :A<CR>


    " deletes the remaining chars from a string
    nnoremap <Leader>ds vf"hd

    " FZF
    "
    " https://stackoverflow.com/questions/59885329/how-to-exclude-file-name-from-fzf-filtering-after-ripgrep-search-results
    "
    " command! -bang -nargs=* Ag
    "   \ call fzf#vim#ag(<q-args>, {'options': '--nobreak --no-heading'}, <bang>0)
    " command! -bang -nargs=? Ag
    "   \ call fzf#vim#ag(<q-args>, '--no-heading --nobreak', <bang>0)
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ "rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
      \ 1,
      \ fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}),
      \ <bang>0)

      "\ <bang>0 ? fzf#vim#with_preview('up:60%')
      "\         : fzf#vim#with_preview('right:50%:hidden', '?'),
      "\ <bang>0)


    " let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
    map <leader>fa :Files! app/assets<cr>
    map <leader>fj :Files! app/javascript<cr>
    map <leader>fv :Files! app/views<cr>
    map <leader>fc :Files! app/controllers<cr>
    map <leader>fm :Files! app/models<cr>
    map <leader>fl :Files! lib<cr>
    map <leader>fs :Files! spec<cr>
    map <leader>f :Files!<cr>
    nmap <leader>b :Buffers!<cr>
    " opens buffer list and writes ':b ', so you just have to type a number
    nnoremap <leader>l :Buffers<CR>

  " JAVASCRIPT
    au FileType html,css,erb,javascript.jsx,typescript EmmetInstall

  " TYPESCRIPT
  " This option makes things really slow.
  let g:tsuquyomi_completion_detail = 0
  let g:tsuquyomi_completion_preview = 0
  let g:tsuquyomi_use_local_typescript = 1

  augroup syntax
    au!
    autocmd BufNewFile,BufRead Gemfile,Gemfile.tt,Gemfile.backup    set syntax=ruby
  augroup END

  augroup typescript
    au!
    autocmd BufNewFile,BufRead *.tsx   set re=0
    autocmd BufNewFile,BufRead *.ts    set re=0
    autocmd BufNewFile,BufRead *.tsx   set syntax=typescriptreact
    autocmd BufNewFile,BufRead *.ts    set syntax=javascript

    " Type definitions
    autocmd FileType typescript,typescript.tsx nmap <Space><C-]> <Plug>(TsuquyomiReferences)
    autocmd FileType typescript,typescript.tsx nnoremap <leader>rn :TsuRenameSymbol<cr>
    autocmd FileType typescript,typescript.tsx nnoremap <leader>d :TsuDefinition<cr>
    autocmd FileType typescript,typescript.tsx nnoremap <leader>D :TsuTypeDefinition<cr>
  augroup END

  let g:user_emmet_leader_key='<C-y>'
  let g:user_emmet_settings = {
    \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
    \}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Rename current file
  function! RenameFile()
    let old_name = expand('%')
    let old_directory = $PWD . "/" . fnamemodify(expand(old_name), ':h')
    let new_name = input('Renaming file. New file name: ', expand('%'), 'file')
    let new_directory = fnamemodify(expand(new_name), ':h')
    if new_name != '' && new_name != old_name
      exec ':silent !mkdir -p ' . new_directory
      exec ':saveas ' . new_name
      exec ':silent !rm ' . old_name
      exec ':silent !find ' . old_directory . ' -type d -empty -exec rmdir {} +'
      redraw!
    endif
  endfunction

  " Copy current file to a new location
  function! CopyFile()
    let old_name = expand('%')
    let new_name = input('Copying file. New file name: ', expand('%'), 'file')
    let new_directory = fnamemodify(expand(new_name), ':h')
    if new_name != '' && new_name != old_name
      exec ':silent !mkdir -p ' . new_directory
      exec ':saveas ' . new_name
      redraw!
    endif
  endfunction

  map <leader>n :call RenameFile()<cr>
  map <leader>c :call CopyFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TESTS & SPECS FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  function! SleepForZeusToReload()
    exec ':sleep 50m'
  endfunction

  nnoremap <cr> <ESC>:w<CR>\|:call SleepForZeusToReload()\|:call RunTestFile()<cr>
  " When entering the command-line window, remove the mapping so it won't conflict
  autocmd CmdwinEnter * silent! unmap <CR>
  nnoremap <Bslash> <ESC>:w<CR>\|:sleep 50m<CR>\|:call RunNearestTest()<cr>
  map <leader>t :call RunTestFile()<cr>
  map <leader>r :call RunNearestTest()<cr>
  map <leader>bt <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb %<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENT CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " taken from http://vim.wikia.com/wiki/Highlight_unwanted_spaces
  highlight RedundantSpaces ctermbg=red guibg=red
  match RedundantSpaces /\s\+$/
  autocmd BufWinEnter * match RedundantSpaces /\s\+$/
  " Slow?
  " autocmd InsertEnter * match RedundantSpaces /\s\+\%#\@<!$/
  " autocmd InsertLeave * match RedundantSpaces /\s\+$/
  autocmd BufWinLeave * call clearmatches()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" INDENTING WHEN PASTING
" Paste and indent if we're at the beginning of a line. Else, just paste.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PasteAndIndent()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    "execute ":normal! p=`]"
    execute ":echo 1111"
    execute ":normal! p"
  else
    execute ":echo 2222"
    execute ":normal! p"
  endif
endfunction

" PLUGINS
"
" Nerdtree
let NERDTreeShowHidden=1
map <C-n> :NERDTreeToggle %<CR>
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" AI.Vim
let g:ai_no_mappings=1
let g:ai_completions_model="gpt-3.5-turbo"
let g:ai_edits_model="gpt-4"
let g:ai_timeout=20
vnoremap <silent> <leader>aif :AI fix grammar and spelling and replace slang and contractions with a formal academic writing style<CR>

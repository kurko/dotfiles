#!/bin/bash

source $DOTFILES/bash/alias/bash.bashrc
PROMPT_COMMAND=""

# - Add command to PROMPT_COMMAND (runs before each command)
# - Makes sure the command is not already in PROMPT_COMMAND
addToPromptCommand() {
  if [[ ":$PROMPT_COMMAND:" != *":$1:"* ]]; then
    if [[ "$PROMPT_COMMAND" == "" ]]; then
      PROMPT_COMMAND="$1"
    else
      PROMPT_COMMAND="$PROMPT_COMMAND; $1"
    fi
  fi
}

# Deprecated in Ubuntu
#export GREP_OPTIONS="--color=auto"
export GREP_COLOR="4;33"
export CLICOLOR="auto"

# Reset
NO_COLOR='\e[0m'       # Text Reset

# Regular Colors
BLACK='\e[0;30m'        # Black
RED='\e[0;31m'          # Red
GREEN='\e[0;32m'        # Green
YELLOW='\e[0;33m'       # Yellow
BLUE='\e[0;34m'         # Blue
PURPLE='\e[0;35m'       # Purple
CYAN='\e[0;36m'         # Cyan
WHITE='\e[0;37m'        # White

# Bold
BBLACK='\e[1;30m'       # Black
BRED='\e[1;31m'         # Red
BGREEN='\e[1;32m'       # Green
BYELLOW='\e[1;33m'      # Yellow
BBLUE='\e[1;34m'        # Blue
BPURPLE='\e[1;35m'      # Purple
BCYAN='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # Whit

USER='\u'

################################
# FUNCTIONS
################################

function __git_root_dir {
  root_dir="$(git rev-parse --show-toplevel 2>&1 | sed -n '/\/.*\/.*/p')"
  if [ "${root_dir}" != "" ]; then
    root_dir="${root_dir}/"
  fi
  echo $root_dir
}

function __ruby_version {
  root_dir=$(__git_root_dir)

  if [ -f "${root_dir}Gemfile" ]      ||
     [ -f "${root_dir}Gemfile.lock" ] ||
     [ -f "${root_dir}Rakefile" ]     || [ -f "Rakefile" ] ||
     [ -f "${root_dir}Capfile" ]      ||
     [ -f "${root_dir}config.ru" ]
  then
    version="$(ruby -v 2>&1 | cut -d " " -f2 | sed -n '/[0-9]/p')"
    if [ "${version}" != "" ]; then
      echo $version
    else
      echo "No Ruby;"
    fi
  fi
}
function __rails_version {
  root_dir=$(__git_root_dir)

  if [ -f "${root_dir}Gemfile.lock" ]
  then
    version="$(cat ${root_dir}Gemfile.lock | sed -n 's/^\( [^a-zA-Z]rails \)([^0-9] \(.*\).*)/\2/p')"
    echo $version
  fi
}

function __ruby_project {
  result=""
  ruby_version="$(__ruby_version)"
  if [ "${ruby_version}" != "" ]; then
    echo "${ruby_version}"
  fi
}
function __rails_project {
  result=""
  rails_version="$(__rails_version)"
  if [ "${rails_version}" != "" ]; then
    echo "Rails ${rails_version}"
  fi
}
function __ember_js_version {
  root_dir=$(__git_root_dir)

  if [ -f "${root_dir}bower.json" ]
  then
    version=$(cat ${root_dir}bower.json | sed -n "s/ember['\"].*\"\(.*\)['\"],/\1/p")
    version=$(echo ${version}|tr -d '"')
    echo $version
  fi
}

function __git_last_commit {
  if git rev-parse --git-dir > /dev/null 2>&1; then
    if [ "$(git rev-list --all --count)" != "0" ]; then
      commit="$(git rev-parse --short=2 HEAD)"
      if [ "#{commit}" != "" ]; then
        echo "$commit"
      fi
    fi
  fi
}

function __javascript_project() {
  result=""
  ember_cli_version="$(__ember_js_version)"
  if [ "${ember_cli_version}" != "" ]; then
    if [[ $ember_cli_version =~ git ]]; then
      result="Ember.js@git"
    else
      result="Ember.js v${ember_cli_version}"
    fi
  fi
  if [ "${result}" != "" ]; then
    echo "($result) "
  fi
}

# some colors
c_cyan=`tput setaf 6`
c_red=`tput setaf 1`
c_green=`tput setaf 2`
c_sgr0=`tput sgr0`
c_pink=`tput setaf 5`
parse_git_branch () {
  git rev-parse -git-dir >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    remote=""
    git_status="$(git status 2> /dev/null)"
    if [ $? -eq 128 ]; then
      echo " (!GIT_DIR!)"
    else
      branch=`git rev-parse --symbolic-full-name --abbrev-ref HEAD`
      git config --get branch.$branch.remote >/dev/null 2>&1
      if [ $? -eq 0 ]; then

        # it's a tracking branch
        diverged=`git log @{u}... --pretty=oneline | wc -l | sed -e 's/[ \t]*//g'`

        if [ $diverged -ne 0 ]; then
          behind=`git log ..@{u} --pretty=oneline | wc -l | sed -e 's/[ \t]*//g'`
          ahead=`git log @{u}.. --pretty=oneline | wc -l | sed -e 's/[ \t]*//g'`

          if [ "$behind" == "$diverged" ]; then
            #remote=" [$behind]↓"
            remote="↓"
          elif [ "$ahead" == "$diverged" ]; then
            #remote=" [$ahead]
            remote="↑"
          else
            remote="↕"
            #remote=" [$behind]↓ [$ahead]↑"
          fi
        fi
      fi
      echo "(${branch}${remote})"
    fi
  else
    return 0
  fi
}

branch_color () {
  color=""
  git rev-parse -git-dir >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    git status --untracked-files=no --porcelain >/dev/null 2>&1
    if [ $? -eq 128 ]; then
      color=${c_pink}
    elif [ -z "$(git status --untracked-files=no --porcelain)" ]; then
      color="${c_green}"
    else
      color=${c_red}
    fi
  else
    return 0
  fi
  echo -ne $color
}

# This will take various information about the current dir (Ruby version,
# last git commit etc) and put in an array. Then it will write these elements
# joining them with a comma (,). It will look like:
#
#   2.2.2p95, 7518b
#
function set_ps1() {
  DirInfo=()
  ruby_info="$(echo $(__ruby_project))"
  rails_info="$(echo $(__rails_project))"
  git_commit_info="$(echo $(__git_last_commit))"
  js_info="$(echo $(__javascript_project))"

  # For bash arrays, we have to use ' if we want to have string elements with
  # spaces.
  #
  # The reason for the ''" is because we have to write the value returned from
  # the function without passing its reference. If instead we do
  # '${ruby_info}', it will pass the function reference which will render bad
  # values when evaluation its length (e.g for "", ${#value} will return 10).
  DirInfo=(''"${ruby_info}"''
  ''"${rails_info}"''
  ''"${git_commit_info}"''
  ''"${js_info}"'')
  DirInfoString="$(echo $(join_array DirInfo ', '))"

  export PS1=""
  if [ "${DirInfoString}" != "" ]; then
    export PS1="\[$YELLOW\](${DirInfoString})\[${NO_COLOR}\] "
  fi
  export PS1="${PS1}\w "

  if [ "$git_commit_info" != "" ]; then
    if [ "$(git rev-list --all --count)" != "0" ]; then
      export PS1="${PS1}\[\$(branch_color)\]\$(parse_git_branch)\[$NO_COLOR\] "
    else
      export PS1="${PS1}\[$YELLOW\](No commits yet)\[$NO_COLOR\] "
    fi
  fi
  export PS1="\n${PS1}\n\[$NO_COLOR\]→\[$NO_COLOR\] "
}

addToPromptCommand 'set_ps1'
# Set iTerm title to show current directory
if [ $ITERM_SESSION_ID ]; then
  # What to execute when inside iTerm
  addToPromptCommand 'echo -ne "\033];${PWD##*/}\007"'
fi

#if [[ "$TERM" =~ "screen".* ]]; then
  # We are in TMUX!
  #addToPromptCommand 'tmux_update_window_title'
#else
  # We are not in TMUX
  # addToPromptCommand 'echo -ne "\033];${PWD##*/}\007"'
#fi

function debugNowInMs() {
  # depends on coreutils
  echo "$(($(gdate +'%s * 1000 + %-N / 1000000'))) -> $1"
}

#!/usr/bin/env ruby

# This will returned only test files that are related to the files that were
# changed.
#
# Given we have these files:
#
# - lib/a.rb
# - lib/b.rb
# - lib/c.rb
# - spec/lib/a_spec.rb
# - spec/lib/b_spec.rb
# - spec/c_spec.rb
#
# When lib/a.rb and spec/b_spec.rb are changed, then the following files will be
# returned:
#
# - spec/lib/a_spec.rb
# - spec/lib/b_spec.rb
#
# When lib/c.rb is changed, spec/c_spec.rb isn't returned because it doesn't
# match the conventional path name "spec/#{lib_path_to_file}".
#
# With this, you can run `rspec $(rspec_changed_files)`
base_branch = ARGV[0] || `git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'`.strip

# Returns all files modified in the last commit, including what isn't committed
# yet.
all_modified_files = `git ls-files --modified --others --exclude-standard`.split("\n")

# Returns all files from previous commits that are not on master or main.
all_modified_files << `git diff #{base_branch} --name-only --relative`.split("\n")
all_modified_files = all_modified_files.flatten.uniq

spec_files = all_modified_files.map do |file|
  respective_spec = "spec/#{file.gsub(/\.rb/, '_spec.rb')}"
  if File.exist?(respective_spec)
    respective_spec
  else
    file
  end
end

spec_files = spec_files.select do |file|
  file.match(/spec\/.*_spec\.rb/)
end

puts spec_files.uniq.join(" ")
